@page "/assembly"
@using BlazorMonaco.Editor;
@using asm.Asm;
@inject Emulator emulator
<PageTitle>Assembly</PageTitle>


<MudCard Outlined="true" Elevation="10">
    <MudCardContent Class="d-flex">
        <div >
            <StandaloneCodeEditor Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" @ref="codeEditor" />
            <MudButton @onclick="async ()=>await LoadProgram()" Disabled="@cantLoad">Load</MudButton>
		
            <MudButton @onclick="async ()=>await RunEmulator()" Disabled="@cantRun">Run</MudButton>
        </div>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudPaper Width="300px" Square="true">
            <MudList Clickable="true">
				@{
				    int index = 0;
				}
                @foreach (var register in emulator.Registers)
                {
                    var index1 = index;
                    <MudListItem>Register @index1 : @register</MudListItem>
                    <MudDivider/>
                    index++;
                }
            </MudList>
        </MudPaper>
		
	
        
        


    </MudCardContent>
    

</MudCard>

@code {
	StandaloneCodeEditor codeEditor;

	private bool cantLoad => emulator.State == EmulatorState.Running;

	private bool cantRun => emulator.State != EmulatorState.Ready;


	private List<string> elements = new List<string> { "a", "b" };

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = true,
				Language = "plaintext",
				LineHeight=30,
				Value = @"MOV R3,100
#LOOP CMP R3,10
BEQ #END
OUT R3,2
SUB R3,1
BRA #LOOP
#END HLT"
			};
	}

	private async Task LoadProgram()
	{
		emulator.LoadEmulator(await codeEditor.GetValue());
	}

	private async Task RunEmulator()
	{
		emulator.Reset();



	    while (await emulator.RunNext())
	    {
			StateHasChanged();
	    }
	}



	
}
